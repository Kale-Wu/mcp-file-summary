In order to drive safely, it's imperative that drivers always adopt safe and positive driving behaviors. A good driver is always alert, wary, patient, and considerate when driving, constantly scanning and being aware of the speed and position of their vehicle with respect to other vehicles and their surroundings. 

#! /usr/bin/env node

import { runContext } from "@modelcontextprotocol/sdk";

import { walkDir } from "./lib/fs-utils.js";
import { getContext } from "./lib/context.js";
import { fileContextSchema, fileActionSchema } from "./lib/schema.js";

const folderPath = process.argv[2] || process.cwd(); // Default to current working directory if no path is provided

(async () => {
    // Get files from directory
    const fileList = walkDir(folderPath);
    console.log(`Found ${fileList.length} files in directory: ${folderPath}`);

    // Turn file paths into contexts
    const contexts = fileList.map(getContext);

    // Get results from model
    const results = await Promise.all(
        contexts.map(async (context) => {
            const result = await runContext({
                input: context,
                inputSchema: fileContextSchema,
                outputSchema: fileActionSchema,
                model: "openai/gpt-3.5-turbo", // Specify the model to use
                instructions: "Given the file metadata and content, provide a concise 2-3 sentence summary and suggest an appropriate action such as 'Move to Pictures folder', 'Delete', or 'No action needed'.",
            });

            return {
                ...context,
                summary: result.output.summary,
                action: result.output.action,
            };
        })
    );

    console.log("Results:");
    console.log(JSON.stringify(results, null, 2));
})

#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

import fs from 'fs';
import path from 'path';
import { walkDir } from "./lib/fs-utils";

const server = new McpServer({
  name: "mcp-fileInfo-server",
  version: "1.0.0"
});

const inputSchema = {
  path: z.string().describe("The path of a file or directory to get information about"),
  encoding: z.string().optional().describe("The encoding of the file content, defaults to 'utf-8'")
};

function getFileInfo(filePath, encoding = 'utf-8') {
    const stats = fs.statSync(filePath);
    const ext = path.extname(filePath).slice(1).toLowerCase(); // Get file extension and convert to lowercase
    const baseName = path.basename(filePath);

    let content = null;

    // Attempt to read text
    try {
        const raw = fs.readFileSync(filePath, encoding);
        content = raw.slice(0, 2048); // Limit content to first 1000 characters
    } catch {
        content = null; // If reading fails, set content to null
    }

    return {
        path: filePath,
        name: baseName,
        type: ext,
        size: stats.size,
        lastModified: stats.mtime.getDate() + '/' + (stats.mtime.getMonth() + 1) + '/' + stats.mtime.getFullYear() + '(DD/MM/YYYY)',
        content: content,
    }
}

async function getDirectoryInfo({ path, encoding = 'utf-8' }) {
    try {
        const fileList = walkDir(path);
        return fileList.map(fp => getFileInfo(fp, encoding));
    } catch (error) {
        throw new Error(`Error processing directory: ${error.message}`);
    }
}

server.registerTool("fileInfo", {
  title: "File Info Tool",
  description: "Get the file information including path, name, type, size, last modified date, and content",
  inputSchema,
}, getDirectoryInfo);

const transport = new StdioServerTransport();
await server.connect(transport);
